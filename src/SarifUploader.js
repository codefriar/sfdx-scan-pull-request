"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core = __importStar(require("@actions/core"));
const sfdxCli_types_1 = require("./sfdxCli.types");
const action_1 = require("@octokit/action");
const github_1 = require("@actions/github");
const common_1 = require("./common");
const node_child_process_1 = require("node:child_process");
/**
 * @description This class is responsible for uploading the SARIF report to the GitHub code scanning API.
 */
class SarifUploader {
    sarifPath;
    octokit;
    constructor(scannerFlags) {
        this.sarifPath = scannerFlags.outfile;
        this.octokit = new action_1.Octokit();
    }
    /**
     * @description Uploads the SARIF report generated by other methods to the GitHub code scanning API.
     */
    async uploadSarifFileToCodeQL() {
        console.log("Uploading SARIF report ...");
        try {
            let base64Data = await this.execShellCmds(this.sarifPath);
            const pullRequestNumber = github_1.context.payload.pull_request?.number;
            const ref = `refs/pull/${pullRequestNumber}/head`;
            const toolName = "SfScaner";
            if (pullRequestNumber && (0, common_1.fileExists)(this.sarifPath)) {
                await this.octokit.codeScanning.uploadSarif({
                    owner: github_1.context.repo.owner,
                    repo: github_1.context.repo.repo,
                    commit_sha: github_1.context.sha,
                    ref: ref,
                    sarif: base64Data,
                    tool_name: toolName,
                });
                core.info(`SARIF report uploaded successfully for pull request #${pullRequestNumber}`);
            }
            else {
                core.warning("No pull request found. Skipping SARIF upload.");
            }
        }
        catch (error) {
            core.setFailed(`Failed to upload SARIF report: ${error.message}`);
        }
    }
    /**
     * @description Executes the gzip and base64 commands to compress and encode the SARIF report.
     * @param sarifPath path to the SARIF report.
     */
    async execShellCmds(sarifPath) {
        return new Promise((resolve, reject) => {
            const gzipCommand = (0, node_child_process_1.spawn)("gzip", ["-c", sarifPath]);
            const base64Command = (0, node_child_process_1.spawn)("base64", ["-w0"]);
            gzipCommand.stdout.pipe(base64Command.stdin);
            let base64Output = "";
            base64Command.stdout.on("data", (data) => {
                base64Output += data.toString();
            });
            base64Command.on("close", (code) => {
                if (code === 0) {
                    resolve(base64Output);
                }
                else {
                    reject(new Error(`Command execution failed with code ${code}`));
                }
            });
            gzipCommand.on("error", (error) => {
                reject(error);
            });
            base64Command.on("error", (error) => {
                reject(error);
            });
        });
    }
}
exports.default = SarifUploader;
