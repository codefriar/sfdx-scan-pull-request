import { BaseReporter, GithubComment } from "./reporter.types.ts";
import { ScannerViolation } from "../sfdxCli.types.ts";
export declare class CommentsReporter extends BaseReporter<GithubComment> {
    /**
     * Read and write GitHub comments
     * @param method GET (read) or POST (write)
     * @param optionalBody Body is required when writing a new comment
     * @private
     */
    private performGithubRequest;
    /**
     * Delete a single GitHub comment
     * @param comment Comment to delete
     * @private
     */
    private performGithubDeleteRequest;
    /**
     * @description Writes the relevant comments to the GitHub pull request.
     * Uses the octokit to post the comments to the PR.
     */
    write(): Promise<void>;
    /**
     * @description Writes the comments to the PR in batches to avoid rate limits
     * @param comments the list of comments to write
     * @param action the action to take (POST or DELETE)
     * @private
     */
    private processCommentsInBatches;
    private processAPIBatch;
    /**
     * @description Filters out the comments that already exist on the PR. This was extracted from the write method
     * to facilitate gathering and re-using this data.
     * @param existingComments
     * @private
     */
    private filterOutExistingComments;
    /**
     * @description Writes the comments to a file and uploads the file as an artifact. Also posts a comment on the PR.
     * @param comments
     * @private
     */
    private uploadCommentsAsArtifactAndPostComment;
    /**
     * @description Deletes all comments that have been detected as resolved.
     * Deletion is used because resolving is not available in the REST API
     * @param newComments
     * @param existingComments
     * @private
     */
    private deleteResolvedComments;
    /**
     * @description Get the existing Comments on the PR, filtered by if they include
     *  the hidden comment prefix and if they were generated by a bot
     */
    private getExistingComments;
    /**
     * @description Compares two comments and determines if they are the same
     * @param commentA
     * @param commentB
     * @return boolean If the comments are the same
     */
    matchComment(commentA: GithubComment, commentB: GithubComment): boolean;
    /**
     * @description Translates a violation object into a comment
     *  with a formatted body
     * @param filePath File path that the violation took place in
     * @param violation sfdx-scanner violation
     * @param engine The engine that discovered the violation
     * @returns {} The comment that will be submitted to GitHub
     */
    translateViolationToReport(filePath: string, violation: ScannerViolation, engine: string): void;
    /**
     * @description Formats the body of a review comment as a table
     * @param engine - reporting engine responsible for identifying the violation
     * @param violationType - error or warning depending on threshold and strictly enforced rules
     * @param violation - raw violation from the scan
     * @param filePath - path to the file
     * @param commit_id - Id of the commit to generate a link to the file
     */
    getFormattedBody(engine: string, violationType: string, violation: ScannerViolation, filePath: string, commit_id: string): string;
    logger(message: string): void;
}
